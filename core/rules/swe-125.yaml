rules:
  - id: swe-125
    patterns:
      - pattern: |
          contract $A {
            ...
            function $F(...) {
              ...
            }
            ...
          }
          contract $B is $A {
            ...
            function $F(...) {
              ...
              <...super.$F(...) ...>;
              ...
            }
            ...
          }
          contract $C is $A {
            ...
            function $F(...) {
              ...
              <...super.$F(...) ...>;
              ...
            }
            ...
          }
          contract $D is $B, $C {
            ...
          }
      - focus-metavariable: $D
    message: >
      Solidity supports multiple inheritance, meaning that one contract can
      inherit several contracts. Multiple inheritance introduces ambiguity
      called Diamond Problem: if two or more base contracts define the same
      function, which one should be called in the child contract? Solidity deals
      with this ambiguity by using reverse C3 Linearization, which sets a
      priority between base contracts.

      That way, base contracts have different priorities, so the order of inheritance matters. Neglecting inheritance order can lead to unexpected behavior.
    languages:
      - solidity
    severity: WARNING
    metadata:
      category: security
      references:
        - https://swcregistry.io/docs/SWC-125/
        - https://cwe.mitre.org/data/definitions/696.html
      cwe:
        - "CWE 696: Incorrect Behavior Order"
